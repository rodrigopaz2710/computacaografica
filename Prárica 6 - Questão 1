#include <GL/glut.h>
#include <stdlib.h>
#include <stdio.h>

/* --------- Controle --------- */
static int samples = 40;      /* nº de amostras por curva (varie com [ e ]) */
static int showPoints = 1;    /* mostra/oculta pontos de controle (P para alternar) */

/* --------- Splines (cúbicas) ---------
   Cada “letra” é uma curva de Bézier cúbica (4 pontos).
   P4 da spline 1 == P1 da spline 2
   P4 da spline 2 == P1 da spline 3
*/
GLfloat p1[4][3] = {   /* letra 1 (branca) – pequena curvatura à esquerda */
    { -4.0f, -2.0f, 0.0f }, { -3.4f, -0.8f, 0.0f },
    { -2.6f,  0.6f, 0.0f }, { -2.0f, -2.0f, 0.0f }   /* == p2[0] */
};

GLfloat p2[4][3] = {   /* letra 2 (ciano) – laço maior no centro */
    { -2.0f, -2.0f, 0.0f }, { -1.0f,  2.6f, 0.0f },
    {  0.6f, -2.6f, 0.0f }, {  1.8f, -0.5f, 0.0f }   /* == p3[0] */
};

GLfloat p3[4][3] = {   /* letra 3 (magenta) – laço menor à direita */
    {  1.8f, -0.5f, 0.0f }, {  2.8f,  1.4f, 0.0f },
    {  3.4f, -1.1f, 0.0f }, {  3.6f,  0.8f, 0.0f }
};

static void drawBezier(GLfloat ctrl[4][3])
{
    /* Programa o avaliador para esta curva */
    glMap1f(GL_MAP1_VERTEX_3, 0.0f, 1.0f, 3, 4, &ctrl[0][0]);
    glEnable(GL_MAP1_VERTEX_3);

    glBegin(GL_LINE_STRIP);
    for (int i = 0; i <= samples; ++i)
        glEvalCoord1f((GLfloat)i / (GLfloat)samples);
    glEnd();

    if (showPoints) {
        glPointSize(5.0f);
        glBegin(GL_POINTS);
        for (int i = 0; i < 4; ++i)
            glVertex3fv(&ctrl[i][0]);
        glEnd();
    }
}

void init(void)
{
    glClearColor(0,0,0,0);
    glShadeModel(GL_FLAT);
}

void display(void)
{
    glClear(GL_COLOR_BUFFER_BIT);

    /* spline 1 – branca */
    glColor3f(1.0f, 1.0f, 1.0f);
    drawBezier(p1);

    /* spline 2 – ciano */
    glColor3f(0.0f, 1.0f, 1.0f);
    drawBezier(p2);

    /* spline 3 – magenta */
    glColor3f(1.0f, 0.0f, 1.0f);
    drawBezier(p3);

    glFlush();
}

void reshape(int w, int h)
{
    glViewport(0,0,(GLsizei)w,(GLsizei)h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    if (w <= h)
        glOrtho(-5.0, 5.0, -5.0*(GLfloat)h/(GLfloat)w,
                 5.0*(GLfloat)h/(GLfloat)w, -5.0, 5.0);
    else
        glOrtho(-5.0*(GLfloat)w/(GLfloat)h,  5.0*(GLfloat)w/(GLfloat)h,
                -5.0, 5.0, -5.0, 5.0);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

void keyboard(unsigned char key, int x, int y)
{
    switch (key) {
    case '[':  samples -= 2; if (samples < 4) samples = 4; glutPostRedisplay(); break;
    case ']':  samples += 2; if (samples > 200) samples = 200; glutPostRedisplay(); break;
    case 'p': case 'P': showPoints = !showPoints; glutPostRedisplay(); break;
    case 27: exit(0); break;
    default: break;
    }
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(600, 600);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Curvas de Bezier - tres splines encadeadas");
    init();
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(keyboard);
    glutMainLoop();
    return 0;
}
