#include <GL/glut.h>
#include <stdlib.h>

int ordem = 0;       // 0 = desenha azul depois do vermelho, 1 = inverte
int useDepth = 1;    // 1 = depth test ON, 0 = OFF
float posAzul = 0.0; // deslocamento do cubo azul

void init(void) 
{
    glClearColor(0.0, 0.0, 0.0, 0.0);
    glShadeModel(GL_FLAT);
    glEnable(GL_DEPTH_TEST);
}

void display(void)
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    if (useDepth)
        glEnable(GL_DEPTH_TEST);
    else
        glDisable(GL_DEPTH_TEST);

    glLoadIdentity();
    gluLookAt(0.0, 0.0, 5.0,
              0.0, 0.0, 0.0,
              0.0, 1.0, 0.0);

    // Desenho dos cubos
    if (ordem == 0) {
        // vermelho
        glPushMatrix();
        glTranslatef(-0.5, 0.0, 0.0);
        glColor3f(1.0, 0.0, 0.0);
        glutSolidCube(1.0);
        glPopMatrix();

        // azul
        glPushMatrix();
        glTranslatef(posAzul, 0.0, -0.5);
        glColor3f(0.0, 0.0, 1.0);
        glutSolidCube(1.0);
        glPopMatrix();
    } else {
        // azul
        glPushMatrix();
        glTranslatef(posAzul, 0.0, -0.5);
        glColor3f(0.0, 0.0, 1.0);
        glutSolidCube(1.0);
        glPopMatrix();

        // vermelho
        glPushMatrix();
        glTranslatef(-0.5, 0.0, 0.0);
        glColor3f(1.0, 0.0, 0.0);
        glutSolidCube(1.0);
        glPopMatrix();
    }

    glutSwapBuffers();
}

void reshape(int w, int h)
{
    glViewport(0, 0, (GLsizei) w, (GLsizei) h); 
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(60.0, (GLfloat) w / (GLfloat) h, 1.0, 20.0);
    glMatrixMode(GL_MODELVIEW);
}

void keyboard(unsigned char key, int x, int y)
{
    switch (key) {
        case 's': // move azul p/ direita
            posAzul += 0.1f;
            break;
        case 'S': // move azul p/ esquerda
            posAzul -= 0.1f;
            break;
        case 'i': // inverte ordem de desenho
            ordem ^= 1;
            break;
        case 'z': // ativa/desativa depth test
            useDepth ^= 1;
            break;
        case 27: // ESC
            exit(0);
            break;
    }
    glutPostRedisplay();
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(500, 500); 
    glutInitWindowPosition(100, 100);
    glutCreateWindow("questao 1");
    init();
    glutDisplayFunc(display); 
    glutReshapeFunc(reshape);
    glutKeyboardFunc(keyboard);
    glutMainLoop();
    return 0;
}
