#include <GL/glut.h>  
#include <stdlib.h>

/* ângulo comum às três luzes */
static int spin = 0;
/* toggles das luzes */
static int onR = 1, onG = 1, onB = 1;

/* helpers: desenhar marcador da luz */
static void drawMarker(float r, float g, float b)
{
    glDisable(GL_LIGHTING);
    glColor3f(r, g, b);
    glutWireCube(0.12);
    glEnable(GL_LIGHTING);
}

void init(void)
{
    /* material da esfera */
    GLfloat mat_amb[]   = {0.2f, 0.2f, 0.2f, 1.0f};
    GLfloat mat_dif[]   = {0.8f, 0.8f, 0.8f, 1.0f};
    GLfloat mat_spe[]   = {1.0f, 1.0f, 1.0f, 1.0f};
    GLfloat shin[]      = {50.0f};
    glMaterialfv(GL_FRONT, GL_AMBIENT,   mat_amb);
    glMaterialfv(GL_FRONT, GL_DIFFUSE,   mat_dif);
    glMaterialfv(GL_FRONT, GL_SPECULAR,  mat_spe);
    glMaterialfv(GL_FRONT, GL_SHININESS, shin);

    /* LIGHT0 – vermelha (em cima) */
    GLfloat L0_dif[] = {1.0f, 0.0f, 0.0f, 1.0f};
    GLfloat L0_spe[] = {1.0f, 0.2f, 0.2f, 1.0f};
    glLightfv(GL_LIGHT0, GL_DIFFUSE,  L0_dif);
    glLightfv(GL_LIGHT0, GL_SPECULAR, L0_spe);

    /* LIGHT1 – verde (direita) */
    GLfloat L1_dif[] = {0.0f, 1.0f, 0.0f, 1.0f};
    GLfloat L1_spe[] = {0.2f, 1.0f, 0.2f, 1.0f};
    glLightfv(GL_LIGHT1, GL_DIFFUSE,  L1_dif);
    glLightfv(GL_LIGHT1, GL_SPECULAR, L1_spe);

    /* LIGHT2 – azul (esquerda) */
    GLfloat L2_dif[] = {0.0f, 0.0f, 1.0f, 1.0f};
    GLfloat L2_spe[] = {0.2f, 0.2f, 1.0f, 1.0f};
    glLightfv(GL_LIGHT2, GL_DIFFUSE,  L2_dif);
    glLightfv(GL_LIGHT2, GL_SPECULAR, L2_spe);

    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);
    glEnable(GL_LIGHT1);
    glEnable(GL_LIGHT2);

    glEnable(GL_DEPTH_TEST);
    glShadeModel(GL_SMOOTH);
    glClearColor(0,0,0,0);
}

void placeLightsAndMarkers(void)
{
    /* câmera fixa */
    gluLookAt(0.0, 0.0, 5.0,
              0.0, 0.0, 0.0,
              0.0, 1.0, 0.0);

    /* --------- LUZ VERMELHA (LIGHT0): roda em X; começa em cima --------- */
    GLfloat pos0[] = {0.0f, 1.2f, 0.0f, 1.0f};
    glPushMatrix();
        glRotatef((GLfloat)spin, 1.f, 0.f, 0.f);
        glLightfv(GL_LIGHT0, GL_POSITION, pos0);
        glTranslatef(pos0[0], pos0[1], pos0[2]);
        drawMarker(1.f, 0.f, 0.f);
    glPopMatrix();

    /* --------- LUZ VERDE (LIGHT1): roda em Y; começa à direita --------- */
    GLfloat pos1[] = {1.2f, 0.0f, 0.0f, 1.0f};
    glPushMatrix();
        glRotatef((GLfloat)spin, 0.f, 1.f, 0.f);
        glLightfv(GL_LIGHT1, GL_POSITION, pos1);
        glTranslatef(pos1[0], pos1[1], pos1[2]);
        drawMarker(0.f, 1.f, 0.f);
    glPopMatrix();

    /* --------- LUZ AZUL (LIGHT2): roda em Z; começa à esquerda --------- */
    GLfloat pos2[] = {-1.2f, 0.0f, 0.0f, 1.0f};
    glPushMatrix();
        glRotatef((GLfloat)spin, 0.f, 0.f, 1.f);
        glLightfv(GL_LIGHT2, GL_POSITION, pos2);
        glTranslatef(pos2[0], pos2[1], pos2[2]);
        drawMarker(0.f, 0.f, 1.f);
    glPopMatrix();
}

void display(void)
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    glPushMatrix();
        placeLightsAndMarkers();      /* posiciona luzes e marcadores */
        glutSolidSphere(1.0, 60, 48); /* esfera central */
    glPopMatrix();

    glFlush();
}

void reshape (int w, int h)
{
    glViewport(0, 0, (GLsizei)w, (GLsizei)h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(40.0, (GLfloat)w/(GLfloat)h, 1.0, 20.0);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

void mouse(int button, int state, int x, int y)
{
    if (state != GLUT_DOWN) return;
    if (button == GLUT_LEFT_BUTTON) {
        spin = (spin + 15) % 360;   /* mesma “tecla/botão” rotaciona as três */
        glutPostRedisplay();
    }
}

void keyboard(unsigned char key, int x, int y)
{
    switch (key) {
        case 'r': case 'R': /* toggle luz vermelha */
            onR = !onR;
            if (onR) glEnable(GL_LIGHT0); else glDisable(GL_LIGHT0);
            glutPostRedisplay();
            break;
        case 'g': case 'G': /* toggle luz verde */
            onG = !onG;
            if (onG) glEnable(GL_LIGHT1); else glDisable(GL_LIGHT1);
            glutPostRedisplay();
            break;
        case 'b': case 'B': /* toggle luz azul */
            onB = !onB;
            if (onB) glEnable(GL_LIGHT2); else glDisable(GL_LIGHT2);
            glutPostRedisplay();
            break;
        case 27: exit(0); break;
        default: break;
    }
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(600, 600);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Várias fontes de luz - vermelho, verde e azul");
    init();
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutMouseFunc(mouse);
    glutKeyboardFunc(keyboard);
    glutMainLoop();
    return 0;
}
